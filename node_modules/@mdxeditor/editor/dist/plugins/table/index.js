import { gfmTableFromMarkdown, gfmTableToMarkdown } from "mdast-util-gfm-table";
import { gfmTable } from "micromark-extension-gfm-table";
import { coreSystem } from "../core/index.js";
import { LexicalTableVisitor } from "./LexicalTableVisitor.js";
import { MdastTableVisitor } from "./MdastTableVisitor.js";
import { $createTableNode, TableNode } from "./TableNode.js";
import { system } from "../../gurx/realmFactory.js";
import { realmPlugin } from "../../gurx/react.js";
function seedTable(rows = 1, columns = 1) {
  const table = {
    type: "table",
    children: []
  };
  for (let i = 0; i < rows; i++) {
    const tableRow = {
      type: "tableRow",
      children: []
    };
    for (let j = 0; j < columns; j++) {
      const cell = {
        type: "tableCell",
        children: []
      };
      tableRow.children.push(cell);
    }
    table.children.push(tableRow);
  }
  return table;
}
const tableSystem = system(
  (r, [{ insertDecoratorNode }]) => {
    const insertTable = r.node();
    r.link(
      r.pipe(
        insertTable,
        r.o.map(({ rows, columns }) => {
          return () => $createTableNode(seedTable(rows, columns));
        })
      ),
      insertDecoratorNode
    );
    return {
      insertTable
    };
  },
  [coreSystem]
);
const [
  /** @internal */
  tablePlugin,
  /** @internal */
  tablePluginHooks
] = realmPlugin({
  id: "table",
  systemSpec: tableSystem,
  init: (realm) => {
    realm.pubKey("addMdastExtension", gfmTableFromMarkdown);
    realm.pubKey("addSyntaxExtension", gfmTable);
    realm.pubKey("addImportVisitor", MdastTableVisitor);
    realm.pubKey("addLexicalNode", TableNode);
    realm.pubKey("addExportVisitor", LexicalTableVisitor);
    realm.pubKey("addToMarkdownExtension", gfmTableToMarkdown({ tableCellPadding: true, tablePipeAlign: true }));
  }
});
export {
  tablePlugin,
  tablePluginHooks,
  tableSystem
};
