import { mdxFromMarkdown, mdxToMarkdown } from "mdast-util-mdx";
import { mdxjs } from "micromark-extension-mdxjs";
import { coreSystem } from "../core/index.js";
import { $createLexicalJsxNode, LexicalJsxNode } from "./LexicalJsxNode.js";
import { LexicalJsxVisitor } from "./LexicalJsxVisitor.js";
import { MdastMdxJsEsmVisitor } from "./MdastMdxJsEsmVisitor.js";
import { MdastMdxJsxElementVisitor } from "./MdastMdxJsxElementVisitor.js";
import { system } from "../../gurx/realmFactory.js";
import { realmPlugin } from "../../gurx/react.js";
function isMdastJsxNode(node) {
  return node.type === "mdxJsxFlowElement" || node.type === "mdxJsxTextElement";
}
function toMdastJsxAttributes(attributes) {
  return Object.entries(attributes).map(([name, value]) => ({
    type: "mdxJsxAttribute",
    name,
    value
  }));
}
const jsxSystem = system(
  (r, [{ insertDecoratorNode }]) => {
    const insertJsx = r.node();
    r.link(
      r.pipe(
        insertJsx,
        r.o.map(({ kind, name, children, props }) => {
          return () => {
            const attributes = toMdastJsxAttributes(props);
            if (kind === "flow") {
              return $createLexicalJsxNode({
                type: "mdxJsxFlowElement",
                name,
                children: children ?? [],
                attributes
              });
            } else {
              return $createLexicalJsxNode({
                type: "mdxJsxTextElement",
                name,
                children: children ?? [],
                attributes
              });
            }
          };
        })
      ),
      insertDecoratorNode
    );
    return {
      insertJsx
    };
  },
  [coreSystem]
);
const [
  /** @internal */
  jsxPlugin,
  /** @internal */
  jsxPluginHooks
] = realmPlugin({
  id: "jsx",
  systemSpec: jsxSystem,
  applyParamsToSystem: (realm, params) => {
    realm.pubKey("jsxComponentDescriptors", (params == null ? void 0 : params.jsxComponentDescriptors) || []);
  },
  init: (realm, _) => {
    realm.pubKey("jsxIsAvailable", true);
    realm.pubKey("addMdastExtension", mdxFromMarkdown());
    realm.pubKey("addSyntaxExtension", mdxjs());
    realm.pubKey("addImportVisitor", MdastMdxJsxElementVisitor);
    realm.pubKey("addImportVisitor", MdastMdxJsEsmVisitor);
    realm.pubKey("addLexicalNode", LexicalJsxNode);
    realm.pubKey("addExportVisitor", LexicalJsxVisitor);
    realm.pubKey("addToMarkdownExtension", mdxToMarkdown());
  }
});
export {
  isMdastJsxNode,
  jsxPlugin,
  jsxPluginHooks,
  jsxSystem
};
