import * as RadixPopover from "@radix-ui/react-popover";
import * as Tooltip from "@radix-ui/react-tooltip";
import React__default from "react";
import { createCommand } from "lexical";
import CheckIcon from "../../icons/check.svg.js";
import CopyIcon from "../../icons/content_copy.svg.js";
import EditIcon from "../../icons/edit.svg.js";
import LinkOffIcon from "../../icons/link_off.svg.js";
import OpenInNewIcon from "../../icons/open_in_new.svg.js";
import DropDownIcon from "../../icons/arrow_drop_down.svg.js";
import classNames from "classnames";
import { useCombobox } from "downshift";
import styles from "../../styles/ui.module.css.js";
import { corePluginHooks } from "../core/index.js";
import { linkDialogPluginHooks } from "./index.js";
createCommand();
const MAX_SUGGESTIONS = 20;
function LinkEditForm({ initialUrl, initialTitle, onSubmit, onCancel, linkAutocompleteSuggestions }) {
  const [items, setItems] = React__default.useState(linkAutocompleteSuggestions.slice(0, MAX_SUGGESTIONS));
  const [title, setTitle] = React__default.useState(initialTitle);
  const { isOpen, getToggleButtonProps, getMenuProps, getInputProps, highlightedIndex, getItemProps, selectedItem, inputValue } = useCombobox({
    initialInputValue: initialUrl,
    onInputValueChange({ inputValue: inputValue2 }) {
      inputValue2 = (inputValue2 == null ? void 0 : inputValue2.toLowerCase()) || "";
      const matchingItems = [];
      for (const url of linkAutocompleteSuggestions) {
        if (url.toLowerCase().includes(inputValue2)) {
          matchingItems.push(url);
          if (matchingItems.length >= MAX_SUGGESTIONS) {
            break;
          }
        }
      }
      setItems(matchingItems);
    },
    items,
    itemToString(item) {
      return item ?? "";
    }
  });
  const onSubmitEH = (e) => {
    e.preventDefault();
    onSubmit([inputValue, title]);
  };
  const onKeyDownEH = React__default.useCallback(
    (e) => {
      var _a;
      if (e.key === "Escape") {
        (_a = e.target.form) == null ? void 0 : _a.reset();
      } else if (e.key === "Enter" && (!isOpen || items.length === 0)) {
        e.preventDefault();
        onSubmit([e.target.value, title]);
      }
    },
    [isOpen, items, onSubmit, title]
  );
  const handleSaveClick = (event) => {
    event.stopPropagation();
  };
  const downshiftInputProps = getInputProps();
  const inputProps = {
    ...downshiftInputProps,
    onKeyDown: (e) => {
      onKeyDownEH(e);
      downshiftInputProps.onKeyDown(e);
    }
  };
  const dropdownIsVisible = isOpen && items.length > 0;
  return /* @__PURE__ */ React__default.createElement("form", { onSubmit: onSubmitEH, onReset: onCancel, className: classNames(styles.linkDialogEditForm) }, /* @__PURE__ */ React__default.createElement("div", null, /* @__PURE__ */ React__default.createElement("label", { htmlFor: "link-url" }, "URL")), /* @__PURE__ */ React__default.createElement("div", { className: styles.linkDialogInputContainer }, /* @__PURE__ */ React__default.createElement("div", { "data-visible-dropdown": dropdownIsVisible, className: styles.linkDialogInputWrapper }, /* @__PURE__ */ React__default.createElement("input", { id: "link-url", className: styles.linkDialogInput, ...inputProps, autoFocus: true, size: 40, "data-editor-dialog": true }), /* @__PURE__ */ React__default.createElement("button", { "aria-label": "toggle menu", type: "button", ...getToggleButtonProps() }, /* @__PURE__ */ React__default.createElement(DropDownIcon, null))), /* @__PURE__ */ React__default.createElement("div", { className: styles.linkDialogAutocompleteContainer }, /* @__PURE__ */ React__default.createElement("ul", { ...getMenuProps(), "data-visible": dropdownIsVisible }, items.map((item, index) => /* @__PURE__ */ React__default.createElement(
    "li",
    {
      "data-selected": selectedItem === item,
      "data-highlighted": highlightedIndex === index,
      key: `${item}${index}`,
      ...getItemProps({ item, index })
    },
    item
  ))))), /* @__PURE__ */ React__default.createElement("div", null, /* @__PURE__ */ React__default.createElement("label", { htmlFor: "link-title" }, "Title")), /* @__PURE__ */ React__default.createElement("div", null, /* @__PURE__ */ React__default.createElement("div", { className: styles.linkDialogInputWrapper }, /* @__PURE__ */ React__default.createElement("input", { id: "link-title", className: styles.linkDialogInput, size: 40, value: title, onChange: (e) => setTitle(e.target.value) }))), /* @__PURE__ */ React__default.createElement("div", { style: { display: "flex", justifyContent: "flex-end", gap: "var(--spacing-2)" } }, /* @__PURE__ */ React__default.createElement("button", { type: "reset", title: "Cancel change", "aria-label": "Cancel change", className: classNames(styles.secondaryButton) }, "Cancel"), /* @__PURE__ */ React__default.createElement("button", { type: "submit", title: "Set URL", "aria-label": "Set URL", className: classNames(styles.primaryButton), onClick: handleSaveClick }, "Save")));
}
const LinkDialog = () => {
  const [editorRootElementRef] = corePluginHooks.useEmitterValues("editorRootElementRef");
  const publishWindowChange = linkDialogPluginHooks.usePublisher("onWindowChange");
  const [activeEditor] = corePluginHooks.useEmitterValues("activeEditor");
  const [linkDialogState, linkAutocompleteSuggestions] = linkDialogPluginHooks.useEmitterValues(
    "linkDialogState",
    "linkAutocompleteSuggestions"
  );
  const updateLinkUrl = linkDialogPluginHooks.usePublisher("updateLinkUrl");
  const cancelLinkEdit = linkDialogPluginHooks.usePublisher("cancelLinkEdit");
  const switchFromPreviewToLinkEdit = linkDialogPluginHooks.usePublisher("switchFromPreviewToLinkEdit");
  const removeLink = linkDialogPluginHooks.usePublisher("removeLink");
  const applyLinkChanges = linkDialogPluginHooks.usePublisher("applyLinkChanges");
  React__default.useEffect(() => {
    const update = () => {
      activeEditor == null ? void 0 : activeEditor.getEditorState().read(() => {
        publishWindowChange(true);
      });
    };
    window.addEventListener("resize", update);
    window.addEventListener("scroll", update);
    return () => {
      window.removeEventListener("resize", update);
      window.removeEventListener("scroll", update);
    };
  }, [activeEditor, publishWindowChange]);
  const [copyUrlTooltipOpen, setCopyUrlTooltipOpen] = React__default.useState(false);
  const theRect = linkDialogState == null ? void 0 : linkDialogState.rectangle;
  const onSubmitEH = React__default.useCallback(
    (payload) => {
      updateLinkUrl(payload);
      applyLinkChanges(true);
    },
    [applyLinkChanges, updateLinkUrl]
  );
  const urlIsExternal = linkDialogState.type === "preview" && linkDialogState.url.startsWith("http");
  return /* @__PURE__ */ React__default.createElement(RadixPopover.Root, { open: linkDialogState.type !== "inactive" }, /* @__PURE__ */ React__default.createElement(
    RadixPopover.Anchor,
    {
      "data-visible": linkDialogState.type === "edit",
      className: styles.linkDialogAnchor,
      style: {
        top: theRect == null ? void 0 : theRect.top,
        left: theRect == null ? void 0 : theRect.left,
        width: theRect == null ? void 0 : theRect.width,
        height: theRect == null ? void 0 : theRect.height
      }
    }
  ), /* @__PURE__ */ React__default.createElement(RadixPopover.Portal, { container: editorRootElementRef == null ? void 0 : editorRootElementRef.current }, /* @__PURE__ */ React__default.createElement(
    RadixPopover.Content,
    {
      className: classNames(styles.linkDialogPopoverContent),
      sideOffset: 5,
      onOpenAutoFocus: (e) => e.preventDefault(),
      key: linkDialogState.linkNodeKey
    },
    linkDialogState.type === "edit" && /* @__PURE__ */ React__default.createElement(
      LinkEditForm,
      {
        initialUrl: linkDialogState.url,
        initialTitle: linkDialogState.title,
        onSubmit: onSubmitEH,
        onCancel: cancelLinkEdit.bind(null, true),
        linkAutocompleteSuggestions
      }
    ),
    linkDialogState.type === "preview" && /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, /* @__PURE__ */ React__default.createElement(
      "a",
      {
        className: styles.linkDialogPreviewAnchor,
        href: linkDialogState.url,
        ...urlIsExternal ? { target: "_blank", rel: "noreferrer" } : {},
        title: urlIsExternal ? `Open ${linkDialogState.url} in new window` : linkDialogState.url
      },
      /* @__PURE__ */ React__default.createElement("span", null, linkDialogState.url),
      urlIsExternal && /* @__PURE__ */ React__default.createElement(OpenInNewIcon, null)
    ), /* @__PURE__ */ React__default.createElement(ActionButton, { onClick: () => switchFromPreviewToLinkEdit(true), title: "Edit link URL", "aria-label": "Edit link URL" }, /* @__PURE__ */ React__default.createElement(EditIcon, null)), /* @__PURE__ */ React__default.createElement(Tooltip.Provider, null, /* @__PURE__ */ React__default.createElement(Tooltip.Root, { open: copyUrlTooltipOpen }, /* @__PURE__ */ React__default.createElement(Tooltip.Trigger, { asChild: true }, /* @__PURE__ */ React__default.createElement(
      ActionButton,
      {
        title: "Copy to clipboard",
        "aria-label": "Copy link URL",
        onClick: () => {
          void window.navigator.clipboard.writeText(linkDialogState.url).then(() => {
            setCopyUrlTooltipOpen(true);
            setTimeout(() => setCopyUrlTooltipOpen(false), 1e3);
          });
        }
      },
      copyUrlTooltipOpen ? /* @__PURE__ */ React__default.createElement(CheckIcon, null) : /* @__PURE__ */ React__default.createElement(CopyIcon, null)
    )), /* @__PURE__ */ React__default.createElement(Tooltip.Portal, { container: editorRootElementRef == null ? void 0 : editorRootElementRef.current }, /* @__PURE__ */ React__default.createElement(Tooltip.Content, { className: classNames(styles.tooltipContent), sideOffset: 5 }, "Copied!", /* @__PURE__ */ React__default.createElement(Tooltip.Arrow, null))))), /* @__PURE__ */ React__default.createElement(ActionButton, { title: "Remove link", "aria-label": "Remove link", onClick: () => removeLink(true) }, /* @__PURE__ */ React__default.createElement(LinkOffIcon, null)))
  )));
};
const ActionButton = React__default.forwardRef(({ className, ...props }, ref) => {
  return /* @__PURE__ */ React__default.createElement("button", { className: classNames(styles.actionButton, className), ref, ...props });
});
export {
  LinkDialog,
  LinkEditForm
};
