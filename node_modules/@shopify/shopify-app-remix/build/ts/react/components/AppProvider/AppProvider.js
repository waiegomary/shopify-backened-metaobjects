"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppProvider = void 0;
var tslib_1 = require("tslib");
var jsx_runtime_1 = require("react/jsx-runtime");
var polaris_1 = require("@shopify/polaris");
var en_json_1 = tslib_1.__importDefault(require("@shopify/polaris/locales/en.json"));
var const_1 = require("../../const");
var RemixPolarisLink_1 = require("../RemixPolarisLink");
/**
 * Sets up the Polaris AppProvider and injects the App Bridge script.
 *
 * {@link https://polaris.shopify.com/components/utilities/app-provider}
 * {@link https://shopify.dev/tools/app-bridge}
 *
 * @example
 * Wrap your app in the `AppProvider` component and pass in your API key.
 * ```ts
 * import {authenticate} from '~/shopify.server';
 * import {AppProvider} from '@shopify/shopify-app-remix/react';
 *
 * export async function loader({ request }) {
 *   await authenticate.admin(request);
 *
 *   return json({ apiKey: process.env.SHOPIFY_API_KEY });
 * }
 *
 * export default function App() {
 *   const { apiKey } = useLoaderData();
 *
 *   return (
 *     <AppProvider apiKey={apiKey}>
 *       <Outlet />
 *     </AppProvider>
 *   );
 * }
 * ```
 */
function AppProvider(props) {
    var children = props.children, apiKey = props.apiKey, i18n = props.i18n, _a = props.isEmbeddedApp, isEmbeddedApp = _a === void 0 ? true : _a, _b = props.__APP_BRIDGE_URL, __APP_BRIDGE_URL = _b === void 0 ? const_1.APP_BRIDGE_URL : _b, polarisProps = tslib_1.__rest(props, ["children", "apiKey", "i18n", "isEmbeddedApp", "__APP_BRIDGE_URL"]);
    return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [isEmbeddedApp && (0, jsx_runtime_1.jsx)("script", { src: __APP_BRIDGE_URL, "data-api-key": apiKey }), (0, jsx_runtime_1.jsx)(polaris_1.AppProvider, tslib_1.__assign({}, polarisProps, { linkComponent: RemixPolarisLink_1.RemixPolarisLink, i18n: i18n || en_json_1.default }, { children: children }))] }));
}
exports.AppProvider = AppProvider;
//# sourceMappingURL=AppProvider.js.map