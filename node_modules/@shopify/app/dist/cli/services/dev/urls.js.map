{"version":3,"file":"urls.js","sourceRoot":"","sources":["../../../../src/cli/services/dev/urls.ts"],"names":[],"mappings":"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","sourcesContent":["import {updateURLsPrompt} from '../../prompts/dev.js'\nimport {AppConfiguration, AppConfigurationInterface, AppInterface, isCurrentAppSchema} from '../../models/app/app.js'\nimport {UpdateURLsQuery, UpdateURLsQuerySchema, UpdateURLsQueryVariables} from '../../api/graphql/update_urls.js'\nimport {GetURLsQuery, GetURLsQuerySchema, GetURLsQueryVariables} from '../../api/graphql/get_urls.js'\nimport {setCachedAppInfo} from '../local-storage.js'\nimport {writeAppConfigurationFile} from '../app/write-app-configuration-file.js'\nimport {AbortError, BugError} from '@shopify/cli-kit/node/error'\nimport {Config} from '@oclif/core'\nimport {getAvailableTCPPort} from '@shopify/cli-kit/node/tcp'\nimport {isValidURL} from '@shopify/cli-kit/common/url'\nimport {partnersRequest} from '@shopify/cli-kit/node/api/partners'\nimport {appHost, appPort, isSpin, spinFqdn} from '@shopify/cli-kit/node/context/spin'\nimport {codespaceURL, gitpodURL} from '@shopify/cli-kit/node/context/local'\nimport {fanoutHooks} from '@shopify/cli-kit/node/plugins'\nimport {terminalSupportsRawMode} from '@shopify/cli-kit/node/system'\nimport {TunnelClient} from '@shopify/cli-kit/node/plugins/tunnel'\nimport {outputDebug} from '@shopify/cli-kit/node/output'\n\nexport interface PartnersURLs {\n  applicationUrl: string\n  redirectUrlWhitelist: string[]\n}\n\nexport interface FrontendURLOptions {\n  app: AppInterface\n  noTunnel: boolean\n  tunnelUrl?: string\n  commandConfig: Config\n  tunnelClient: TunnelClient | undefined\n}\n\nexport interface FrontendURLResult {\n  frontendUrl: string\n  frontendPort: number\n  usingLocalhost: boolean\n}\n\n/**\n * The tunnel creation logic depends on 7 variables:\n * - If a Codespaces environment is deteced, then the URL is built using the codespaces hostname. No need for tunnel\n * - If a Gitpod environment is detected, then the URL is built using the gitpod hostname. No need for tunnel\n * - If a Spin environment is detected, then the URL is built using the cli + fqdn hostname as configured in nginx.\n *   No need for tunnel. In case problems with that configuration, the flags Tunnel or Custom Tunnel url could be used\n * - If a tunnelUrl is provided, that takes preference and is returned as the frontendURL\n * - If noTunnel is true, that takes second preference and localhost is used\n * - Otherwise, a tunnel is created. (by default using cloudflare)\n *\n * If there is no cached tunnel plugin and a tunnel is necessary, we'll ask the user to confirm.\n */\nexport async function generateFrontendURL(options: FrontendURLOptions): Promise<FrontendURLResult> {\n  let frontendPort = 4040\n  let frontendUrl = ''\n  let usingLocalhost = false\n\n  if (codespaceURL()) {\n    frontendUrl = `https://${codespaceURL()}-${frontendPort}.githubpreview.dev`\n    return {frontendUrl, frontendPort, usingLocalhost}\n  }\n\n  if (gitpodURL()) {\n    const defaultUrl = gitpodURL()?.replace('https://', '')\n    frontendUrl = `https://${frontendPort}-${defaultUrl}`\n    return {frontendUrl, frontendPort, usingLocalhost}\n  }\n\n  if (isSpin() && !options.tunnelUrl) {\n    frontendUrl = `https://cli.${await spinFqdn()}`\n    if (appPort() !== undefined) {\n      frontendPort = appPort() ?? frontendPort\n      frontendUrl = `https://${appHost()}`\n    }\n    return {frontendUrl, frontendPort, usingLocalhost}\n  }\n\n  if (options.tunnelUrl) {\n    const matches = options.tunnelUrl.match(/(https:\\/\\/[^:]+):([0-9]+)/)\n    if (!matches) {\n      throw new AbortError(`Invalid tunnel URL: ${options.tunnelUrl}`, 'Valid format: \"https://my-tunnel-url:port\"')\n    }\n    frontendPort = Number(matches[2])\n    frontendUrl = matches[1]!\n    return {frontendUrl, frontendPort, usingLocalhost}\n  }\n\n  if (options.noTunnel) {\n    frontendPort = await getAvailableTCPPort()\n    frontendUrl = 'http://localhost'\n    usingLocalhost = true\n  } else if (options.tunnelClient) {\n    const url = await pollTunnelURL(options.tunnelClient)\n    frontendPort = options.tunnelClient.port\n    frontendUrl = url\n  }\n\n  return {frontendUrl, frontendPort, usingLocalhost}\n}\n\n/**\n * Poll the tunnel provider every 0.5 until an URL or error is returned.\n */\nasync function pollTunnelURL(tunnelClient: TunnelClient): Promise<string> {\n  return new Promise<string>((resolve, reject) => {\n    let retries = 0\n    const pollTunnelStatus = async () => {\n      const result = tunnelClient.getTunnelStatus()\n      outputDebug(`Polling tunnel status for ${tunnelClient.provider} (attempt ${retries}): ${result.status}`)\n      if (result.status === 'error') return reject(new BugError(result.message, result.tryMessage))\n      if (result.status === 'connected') {\n        resolve(result.url)\n      } else {\n        retries += 1\n        startPolling()\n      }\n    }\n    const startPolling = () => {\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      setTimeout(pollTunnelStatus, 500)\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    pollTunnelStatus()\n  })\n}\n\nexport function generatePartnersURLs(baseURL: string, authCallbackPath?: string | string[]): PartnersURLs {\n  let redirectUrlWhitelist: string[]\n  if (authCallbackPath && authCallbackPath.length > 0) {\n    const authCallbackPaths = Array.isArray(authCallbackPath) ? authCallbackPath : [authCallbackPath]\n    redirectUrlWhitelist = authCallbackPaths.reduce<string[]>((acc, path) => {\n      if (path && path.length > 0) {\n        acc.push(`${baseURL}${path}`)\n      }\n      return acc\n    }, [])\n  } else {\n    redirectUrlWhitelist = [\n      `${baseURL}/auth/callback`,\n      `${baseURL}/auth/shopify/callback`,\n      `${baseURL}/api/auth/callback`,\n    ]\n  }\n\n  return {\n    applicationUrl: baseURL,\n    redirectUrlWhitelist,\n  }\n}\n\nexport async function updateURLs(\n  urls: PartnersURLs,\n  apiKey: string,\n  token: string,\n  localApp?: AppConfigurationInterface,\n): Promise<void> {\n  const variables: UpdateURLsQueryVariables = {apiKey, ...urls}\n  const query = UpdateURLsQuery\n  const result: UpdateURLsQuerySchema = await partnersRequest(query, token, variables)\n  if (result.appUpdate.userErrors.length > 0) {\n    const errors = result.appUpdate.userErrors.map((error) => error.message).join(', ')\n    throw new AbortError(errors)\n  }\n\n  if (localApp && isCurrentAppSchema(localApp.configuration) && localApp.configuration.client_id === apiKey) {\n    const localConfiguration: AppConfiguration = {\n      ...localApp.configuration,\n      application_url: urls.applicationUrl,\n      auth: {\n        ...localApp.configuration.auth,\n        redirect_urls: urls.redirectUrlWhitelist,\n      },\n    }\n    await writeAppConfigurationFile(localApp.configurationPath, localConfiguration)\n  }\n}\n\nexport async function getURLs(apiKey: string, token: string): Promise<PartnersURLs> {\n  const variables: GetURLsQueryVariables = {apiKey}\n  const query = GetURLsQuery\n  const result: GetURLsQuerySchema = await partnersRequest(query, token, variables)\n  return {applicationUrl: result.app.applicationUrl, redirectUrlWhitelist: result.app.redirectUrlWhitelist}\n}\n\nexport interface ShouldOrPromptUpdateURLsOptions {\n  currentURLs: PartnersURLs\n  appDirectory: string\n  cachedUpdateURLs?: boolean\n  newApp?: boolean\n  localApp?: AppInterface\n  apiKey: string\n}\n\nexport async function shouldOrPromptUpdateURLs(options: ShouldOrPromptUpdateURLsOptions): Promise<boolean> {\n  if (options.localApp && options.localApp.configuration.client_id !== options.apiKey) return true\n  if (options.newApp || !terminalSupportsRawMode()) return true\n  let shouldUpdateURLs: boolean = options.cachedUpdateURLs === true\n\n  if (options.cachedUpdateURLs === undefined) {\n    shouldUpdateURLs = await updateURLsPrompt(\n      options.currentURLs.applicationUrl,\n      options.currentURLs.redirectUrlWhitelist,\n    )\n\n    if (options.localApp && isCurrentAppSchema(options.localApp.configuration)) {\n      const localConfiguration: AppConfiguration = options.localApp.configuration\n      localConfiguration.build = {\n        ...localConfiguration.build,\n        automatically_update_urls_on_dev: shouldUpdateURLs,\n      }\n\n      await writeAppConfigurationFile(options.localApp.configurationPath, localConfiguration)\n    } else {\n      setCachedAppInfo({directory: options.appDirectory, updateURLs: shouldUpdateURLs})\n    }\n  }\n  return shouldUpdateURLs\n}\n\nexport function validatePartnersURLs(urls: PartnersURLs): void {\n  if (!isValidURL(urls.applicationUrl))\n    throw new AbortError(`Invalid application URL: ${urls.applicationUrl}`, 'Valid format: \"https://example.com\"')\n\n  urls.redirectUrlWhitelist.forEach((url) => {\n    if (!isValidURL(url))\n      throw new AbortError(\n        `Invalid redirection URLs: ${urls.redirectUrlWhitelist}`,\n        'Valid format: \"https://example.com/callback1,https://example.com/callback2\"',\n      )\n  })\n}\n\nexport async function startTunnelPlugin(config: Config, port: number, provider: string): Promise<TunnelClient> {\n  const hooks = await fanoutHooks(config, 'tunnel_start', {port, provider})\n  const results = Object.values(hooks).filter(\n    (tunnelResponse) => !tunnelResponse?.isErr() || tunnelResponse.error.type !== 'invalid-provider',\n  )\n  if (results.length > 1) throw new BugError(`Multiple tunnel plugins for ${provider} found`)\n  const first = results[0]\n  if (!first) throw new BugError(`We couldn't find the ${provider} tunnel plugin`)\n  if (first.isErr()) {\n    throw new AbortError(`${provider} failed to start the tunnel.\\n${first.error.message}`, [\n      'What to try:',\n      {\n        list: {\n          items: [\n            ['Try to run the command again'],\n            ['Add the flag', {command: '--tunnel-url {URL}'}, 'to use a custom tunnel URL'],\n          ],\n        },\n      },\n    ])\n  }\n  return first.value\n}\n"]}