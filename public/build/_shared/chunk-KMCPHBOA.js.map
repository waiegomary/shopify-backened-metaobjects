{
  "version": 3,
  "sources": ["../../../app/graphql/metaobjects/queries.ts"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/graphql/metaobjects/queries.ts\"\n);\nimport.meta.hot.lastModified = \"1709719980719.684\";\n}\n// REMIX HMR END\n\nimport * as _ from \"lodash\";\nimport { PAGINATION_LIMIT } from \"~/constants\";\n\nexport const getMetaobjects = async ({\n  graphql,\n  type,\n  before = \"\",\n  after = \"\",\n  query = \"\",\n  first=PAGINATION_LIMIT\n}) => {\n  let variables = {\n    definitionCount: 64,\n    referenceCount: 10,\n    sortKey: \"updated_at\",\n    reverse: false,\n    first: first,\n    type,\n  };\n  if (query) {\n    variables[\"query\"] = query;\n  }\n  if (before) {\n    variables[\"before\"] = before;\n    variables[\"last\"] = first;\n    delete variables[\"first\"];\n  } else if (after) {\n    variables[\"after\"] = after;\n    variables[\"first\"] = first;\n  }\n  const response = await graphql(\n    `\n      query MetaobjectIndex(\n        $query: String\n        $first: Int\n        $last: Int\n        $before: String\n        $after: String\n        $referenceCount: Int\n        $sortKey: String\n        $reverse: Boolean\n        $type: String!\n      ) {\n        metaobjects(\n          first: $first\n          last: $last\n          before: $before\n          after: $after\n          type: $type\n          query: $query\n          reverse: $reverse\n          sortKey: $sortKey\n        ) {\n          edges {\n            cursor\n            node {\n              id\n              displayName\n              handle\n              capabilities {\n                publishable {\n                  status\n                  __typename\n                }\n                __typename\n              }\n              type\n              updatedAt\n              definition {\n                id\n                name\n                access {\n                  storefront\n                  admin\n                  __typename\n                }\n                capabilities {\n                  publishable {\n                    enabled\n                    __typename\n                  }\n                  __typename\n                }\n                __typename\n              }\n              referencedBy(first: $referenceCount) {\n                edges {\n                  cursor\n                  __typename\n                }\n                pageInfo {\n                  hasNextPage\n                  __typename\n                }\n                __typename\n              }\n              __typename\n            }\n            __typename\n          }\n          pageInfo {\n            hasPreviousPage\n            hasNextPage\n            endCursor\n            startCursor\n            __typename\n          }\n          __typename\n        }\n      }\n    `,\n    {\n      variables,\n    }\n  );\n\n  const data = await response.json();\n  return data;\n};\n\nexport const getMetaDefinitions = async ({ graphql, definitionCount = 64 }) => {\n  const response = await graphql(\n    `\n      query MetaobjectIndex($definitionCount: Int) {\n        metaobjectDefinitions(first: $definitionCount, reverse: true) {\n          edges {\n            node {\n              id\n              type\n              name\n              metaobjectsCount\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n      }\n    `,\n    {\n      variables: {\n        definitionCount,\n      },\n    }\n  );\n  return await response.json();\n};\n"],
  "mappings": ";;;;;;AACA;AACA,IAAI,aAAa;AACjB,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EACA;AACA,cAAY,IAAI,eAAe;AAC/B;",
  "names": []
}
