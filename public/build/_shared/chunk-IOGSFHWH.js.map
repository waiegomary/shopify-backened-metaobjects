{
  "version": 3,
  "sources": ["../../../app/components/Tables/MetaDefinition.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/Tables/MetaDefinition.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/Tables/MetaDefinition.tsx\");\n  import.meta.hot.lastModified = \"1709719980712.9211\";\n}\n// REMIX HMR END\n\nimport { Link } from \"@remix-run/react\";\nimport { IndexTable, LegacyCard, Badge } from \"@shopify/polaris\";\nimport { numberFormat } from \"~/utils\";\nconst MetaDefinition = ({\n  edges,\n  pageInfo\n}) => {\n  const orders = [{\n    id: \"1020\",\n    order: \"#1020\",\n    date: \"Jul 20 at 4:34pm\",\n    customer: \"Jaydon Stanton\",\n    total: \"$969.44\",\n    paymentStatus: <Badge progress=\"complete\">Paid</Badge>,\n    fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>\n  }, {\n    id: \"1019\",\n    order: \"#1019\",\n    date: \"Jul 20 at 3:46pm\",\n    customer: \"Ruben Westerfelt\",\n    total: \"$701.19\",\n    paymentStatus: <Badge progress=\"partiallyComplete\">Partially paid</Badge>,\n    fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>\n  }, {\n    id: \"1018\",\n    order: \"#1018\",\n    date: \"Jul 20 at 3.44pm\",\n    customer: \"Leo Carder\",\n    total: \"$798.24\",\n    paymentStatus: <Badge progress=\"complete\">Paid</Badge>,\n    fulfillmentStatus: <Badge progress=\"incomplete\">Unfulfilled</Badge>\n  }];\n  const resourceName = {\n    singular: \"order\",\n    plural: \"orders\"\n  };\n\n  // const { selectedResources, allResourcesSelected, handleSelectionChange } =\n  //   useIndexResourceState(edges);\n\n  const rowMarkup = edges.map(({\n    node: {\n      id,\n      name,\n      type,\n      metaobjectsCount\n    }\n  }, index) => {\n    return <IndexTable.Row onNavigation={() => {}} id={id} key={id} position={index}>\n          <IndexTable.Cell>\n            <Link to={`/app/metaobject/${type}`}>{name}</Link>\n          </IndexTable.Cell>\n          <IndexTable.Cell>{type}</IndexTable.Cell>\n          <IndexTable.Cell>{`${numberFormat(metaobjectsCount)} `}</IndexTable.Cell>\n        </IndexTable.Row>;\n  });\n  return <LegacyCard>\n      <IndexTable resourceName={resourceName} itemCount={orders.length} selectable={false}\n    // selectedItemsCount={\n    //   allResourcesSelected ? 'All' : selectedResources.length\n    // }\n    // onSelectionChange={handleSelectionChange}\n    headings={[{\n      title: \"Name\"\n    }, {\n      title: \"Definition Type\"\n    }, {\n      title: \"Entries\"\n    }]}>\n        {rowMarkup}\n      </IndexTable>\n    </LegacyCard>;\n};\n_c = MetaDefinition;\nexport default MetaDefinition;\nvar _c;\n$RefreshReg$(_c, \"MetaDefinition\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["init_esm"]
}
