{
  "version": 3,
  "sources": ["../../../app/graphql/metaobjects/metaobjectQuery.ts", "../../../app/utils/useStorefrontFetch.ts", "../../../app/graphql/metaobjects/itemDefinationMutation.ts", "../../../app/utils/useToast.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/graphql/metaobjects/metaobjectQuery.ts\"\n);\nimport.meta.hot.lastModified = \"1713578110845.1343\";\n}\n// REMIX HMR END\n\n\n\n\nexport const getMetaobjectQuery = `\nfragment Media on Media {\n    mediaContentType\n    alt\n    __typename\n   \n    ... on MediaImage {\n      id\n      __typename\n      image {\n        url\n        width\n        height\n      }\n    }\n    ... on Video {\n      id\n      __typename\n      sources {\n        mimeType\n        url\n      }\n    }\n    ... on Model3d {\n      id\n      __typename\n      sources {\n        mimeType\n        url\n        __typename\n      }\n    }\n    ... on ExternalVideo {\n      id\n      embedUrl\n      host\n      __typename\n    }\n  }\n\n\nfragment MultiMetaObjectContentFragment on Metaobject {\n  id\n  type\n  handle\n  __typename\n  fields {\n    __typename\n    type\n    value\n    key\n    \n    reference {\n      ... on Metaobject {\n        __typename\n        id\n        handle\n        fields {\n          __typename\n          value\n          type\n          key\n        }\n        type\n      }\n      ...Media\n    }\n    references(first: 100) {\n      nodes {\n        __typename\n        ... on Metaobject {\n          __typename\n        id\n        fields {\n          __typename\n          value\n          type\n          key\n        }\n        type\n      }\n        ...Media\n      }\n    }\n  }\n}\n\n\n\nfragment MetaObjectContentFragment on Metaobject {\n  id\n  type\n  handle\n  __typename\n  fields {\n    __typename\n    type\n    value\n    key\n    reference {\n      ... on Metaobject {\n        __typename\n        id\n        fields {\n          value\n          type\n          key\n          __typename\n          references(first: 100) {\n            nodes {\n              __typename\n              ...MultiMetaObjectContentFragment\n              ...Media\n            }\n          }\n        }\n        type\n      }\n      ...Media\n    }\n    references(first: 100) {\n      nodes {\n        ...MultiMetaObjectContentFragment\n        ...Media\n      }\n    }\n  }\n}\nquery MetaObjectContent($metaobjectHandleInput: MetaobjectHandleInput, $country: CountryCode, $language: LanguageCode) @inContext(country: $country, language: $language) {\n  metaobject(handle: $metaobjectHandleInput) {\n    ...MetaObjectContentFragment\n  }\n}\n`;\n", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/utils/useStorefrontFetch.ts\"\n);\nimport.meta.hot.lastModified = \"1713578110850.194\";\n}\n// REMIX HMR END\n\nasync function useStorefrontFetch(queryOrMutation: any) {\n  const url = `https://${process.env.STOREFRONT}/api/2023-04/graphql.json`;\n\n  var myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  myHeaders.append(\"X-Shopify-Api-Version\", \"2023-04\");\n  myHeaders.append(\"Cache-Control\", \"no-store, no-cache, must-revalidate\");\n  myHeaders.append(\"Access-Control-Allow-Origin\", \"*\");\n\n  myHeaders.append(\n    \"X-Shopify-Storefront-Access-Token\",\n    process.env.STOREFRONT_ACCESS_TOKEN\n  );\n\n  var requestOptions = {\n    method: \"POST\",\n    headers: myHeaders,\n    body: queryOrMutation,\n    redirect: \"follow\",\n  };\n\n  return fetch(url, requestOptions);\n}\n\nexport default useStorefrontFetch;\n", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/graphql/metaobjects/itemDefinationMutation.ts\"\n);\nimport.meta.hot.lastModified = \"1713578110844.9624\";\n}\n// REMIX HMR END\n\nimport { logger } from \"~/utils\";\n\nexport const createItemDefinitionVariables = ({ id, handle, fields }: any) => {\n  return {\n    id,\n    input: {\n      handle,\n      capabilities: {\n        publishable: {\n          status: \"ACTIVE\",\n        },\n      },\n      fields,\n    },\n  };\n};\n\nexport const updateItemDefinitionMutation = async ({ graphql, variables }) => {\n  const response = await graphql(query, {\n    variables,\n  });\n  return response.json();\n};\n\nconst query = `\nmutation MetaobjectUpdate($id: ID!, $input: MetaobjectUpdateInput!) {\n    metaobjectUpdate(id: $id, metaobject: $input) {\n      metaobject {\n        id\n        displayName\n        type\n        handle\n        capabilities {\n          publishable {\n            status\n            __typename\n          }\n         \n          __typename\n        }\n        definition {\n          id\n          name\n          displayNameKey\n          __typename\n        }\n        fields {\n          ...MetaobjectFieldFragment\n          __typename\n        }\n        __typename\n      }\n      userErrors {\n        field\n        message\n        elementIndex\n        elementKey\n        __typename\n      }\n      __typename\n    }\n  }\n  \n  fragment MetaobjectFieldFragment on MetaobjectField {\n    value\n    definition {\n      key\n      name\n      description\n      required\n      validations {\n        name\n        type\n        value\n        __typename\n      }\n      type {\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  \n`;\n", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/utils/useToast.tsx\"\n);\nimport.meta.hot.lastModified = \"1713578110850.2761\";\n}\n// REMIX HMR END\n\nimport { Button, Toast } from \"@shopify/polaris\";\nimport { useCallback, useState } from \"react\";\n\nexport function useToast() {\n  const [active, setActive] = useState(false);\n  const [message, setMessage] = useState(\"Success\");\n  const [error, setError] = useState(false);\n  const handleSetMessage = useCallback((value) => setMessage(value), []);\n\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n  const showToast = useCallback((message, _error = false) => {\n    handleSetMessage(message);\n    if (_error) {\n      setError(true);\n    }\n    toggleActive();\n  }, []);\n  const toastMarkup = active ? (\n    <Toast\n      content={message}\n      error={error}\n      onDismiss={toggleActive}\n      duration={4500}\n    />\n  ) : null;\n\n  return {\n    toastMarkup,\n    active,\n    setActive,\n    showToast,\n  };\n\n  //   return <div>{toastMarkup}</div>;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AACA;AACA,IAAI,aAAa;AACjB,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EACA;AACA,cAAY,IAAI,eAAe;AAC/B;AAMO,IAAM,qBAAqblC;AACA,IAAI,aAAa;AACjB,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EACA;AACA,cAAY,IAAI,eAAe;AAC/B;AAGA,eAAe,mBAAmB,iBAAsB;AACtD,QAAM,MAAM,WAAW,QAAQ,IAAI;AAEnC,MAAI,YAAY,IAAI,QAAQ;AAC5B,YAAU,OAAO,gBAAgB,kBAAkB;AACnD,YAAU,OAAO,yBAAyB,SAAS;AACnD,YAAU,OAAO,iBAAiB,qCAAqC;AACvE,YAAU,OAAO,+BAA+B,GAAG;AAEnD,YAAU;AAAA,IACR;AAAA,IACA,QAAQ,IAAI;AAAA,EACd;AAEA,MAAI,iBAAiB;AAAA,IACnB,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,MAAM;AAAA,IACN,UAAU;AAAA,EACZ;AAEA,SAAO,MAAM,KAAK,cAAc;AAClC;AAEA,IAAO,6BAAQ;;;AClCf;AACA,IAAI,aAAa;AACjB,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EACA;AACA,cAAY,IAAI,eAAe;AAC/B;;;ACPA;AAUA;AACA,mBAAsC;AAiBlC;AA3BJ,IAAI,aAAa;AACjB,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EACA;AACA,cAAY,IAAI,eAAe;AAC/B;AAMO,SAAS,WAAW;AACzB,QAAM,CAAC,QAAQ,SAAS,QAAI,uBAAS,KAAK;AAC1C,QAAM,CAAC,SAAS,UAAU,QAAI,uBAAS,SAAS;AAChD,QAAM,CAAC,OAAO,QAAQ,QAAI,uBAAS,KAAK;AACxC,QAAM,uBAAmB,0BAAY,CAAC,UAAU,WAAW,KAAK,GAAG,CAAC,CAAC;AAErE,QAAM,mBAAe,0BAAY,MAAM,UAAU,CAACA,YAAW,CAACA,OAAM,GAAG,CAAC,CAAC;AACzE,QAAM,gBAAY,0BAAY,CAACC,UAAS,SAAS,UAAU;AACzD,qBAAiBA,QAAO;AACxB,QAAI,QAAQ;AACV,eAAS,IAAI;AAAA,IACf;AACA,iBAAa;AAAA,EACf,GAAG,CAAC,CAAC;AACL,QAAM,cAAc,SAClB;AAAA,IAAC;AAAA;AAAA,MACC,SAAS;AAAA,MACT;AAAA,MACA,WAAW;AAAA,MACX,UAAU;AAAA;AAAA,IAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IACE;AAEJ,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAGF;",
  "names": ["active", "message"]
}
